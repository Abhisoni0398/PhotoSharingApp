import {View, Text, ImageEditor, Keyboard, Modal} from 'react-native';
import React, {useState} from 'react';
import {
  CardField,
  StripeProvider,
  createToken,
  confirmPayment,
} from '@stripe/stripe-react-native';
import {Button} from '../../components/molecules/Button';
import {moderateScale} from '../../styles/responsiveStyles';
import {colors} from '../../styles/colors';
import actions from '../../redux/actions';
import {Header} from '../../components/molecules/Header';
import {Images} from '../../constants/ImagesPath';
import {fontNames} from '../../styles/typography';
import Loader from '../../components/organisms/Loader';

const StripeSdk = ({navigation}) => {
  const [cardInfo, setCardInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  console.log(navigation, 'NAVIGATION++++');

  const freelancer_id = navigation?.state?.params?.data?.freelancer?.id;
  const contract_id = navigation?.state?.params?.data?.contract_id;
  const amount =
    navigation?.state?.params?.data?.contract_next_installment?.price;

  const fetchCardDetail = cardDetail => {
    console.log(cardDetail, 'DETAILS+++++++');
    if (cardDetail?.complete) {
      setCardInfo(cardDetail);
    } else {
      setCardInfo(null);
    }
  };

  const onDone = async () => {
    let apiData = {
      contract_id: contract_id,
      freelancer_id: freelancer_id,
      amount: parseFloat(amount.replace(/\,/g, ''), 10),
    };
    setIsLoading(true);
    try {
      const res = await actions.getPayUrl(apiData);
      console.log(res, 'RES HERE+++');
      if (res?.data?.paymentIntent) {
        let confirmPaymentIntent = await confirmPayment(
          res?.data?.paymentIntent,
          {paymentMethodType: 'Card'},
        );
      }
    } catch (error) {
      console.log(error);
    } finally {
      setIsLoading(false);
    }

    // if (!!cardInfo) {
    //   try {
    //     const resToken = await createToken({...cardInfo, type: 'Card'});
    //     console.log(resToken, 'SUCCESS IN PAYMENT SDK');
    //   } catch (err) {
    //     console.log(err, 'ERROR IN PAYMENT SDK');
    //   }
    // }
  };

  return (
    <StripeProvider
      publishableKey="pk_test_51LlIA0GFzsjrzPXDogpIkYo48ry2yRf3YNOEVvwI7egRLvC0eBoe2BkhoCfJjyDuUK5lswKPVAz1oCWrvZaqHOA800rE1QbXiB"
      urlScheme="your-url-scheme" // required for 3D Secure and bank redirects
      merchantIdentifier="merchant.com.{{YOUR_APP_NAME}}" // required for Apple Pay
    >
      <Header
        onPressLeft={() => navigation.goBack()}
        centerTitle={'Add your Payment Information'}
        leftIcon={Images.backArrow}
        textStyle={{color: colors.black}}
        headerStyle={{paddingHorizontal: moderateScale(12)}}
      />
      <View
        style={{
          flex: 1,
          paddingHorizontal: moderateScale(18),
          backgroundColor: colors.WHITE,
        }}>
        <Text
          style={{
            marginTop: moderateScale(18),
            color: colors.BLACK_OPACITY_36,
            fontFamily: fontNames.boldFont,
            fontSize: moderateScale(15),
          }}>
          Card Information
        </Text>
        <CardField
          postalCodeEnabled={false}
          placeholder={{
            number: '4242 4242 4242 4242',
          }}
          cardStyle={{borderWidth: 1, borderRadius: 12}}
          style={{
            width: '100%',
            height: 50,
            marginVertical: 10,
            backgroundColor: colors.grey,
            borderRadius: moderateScale(12),
          }}
          onCardChange={cardDetails => {
            fetchCardDetail(cardDetails);
          }}
          onFocus={focusedField => {
            console.log('focusField', focusedField);
          }}
          onBlur={() => {
            Keyboard.dismiss();
          }}
        />
        <View style={{marginTop: '10%'}}>
          <Button
            btnText="Done"
            btnStyle={{backgroundColor: colors.skyBlue}}
            onPress={onDone}
          />
        </View>
        <Modal transparent visible={isLoading}>
          <Loader isLoading={isLoading} />
        </Modal>
      </View>
    </StripeProvider>
  );
};

export default StripeSdk;
